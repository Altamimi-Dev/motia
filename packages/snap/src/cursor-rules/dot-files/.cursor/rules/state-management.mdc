---
description: State management between steps
globs: 
alwaysApply: false
---
# State Management

State management allows data to be persisted and shared between steps within a workflow execution.

## Basic Usage

```typescript
export const handler: Handlers['ExampleStep'] = async (input, { state, traceId }) => {
  // Store data
  await state.set(traceId, 'resource', resourceObject)
  
  // Retrieve data
  const resource = await state.get(traceId, 'resource')
  
  // Get all items in scope
  const allItems = await state.getGroup('scope')
  
  // Delete specific data
  await state.delete(traceId, 'resource')
  
  // Clear all flow state
  await state.clear(traceId)
}
```

**Python Example:**
```python
async def handler(input_data, ctx):
    trace_id = ctx.trace_id
    
    # Store, retrieve, delete, clear
    await ctx.state.set(trace_id, 'task', task_data)
    task = await ctx.state.get(trace_id, 'task')
    await ctx.state.delete(trace_id, 'task')
    await ctx.state.clear(trace_id)
```

**Ruby Example:**
```ruby
def handler(input_data, context)
  trace_id = context.trace_id
  
  # Store, retrieve, delete, clear
  context.state.set(trace_id, 'operation', operation_data)
  operation = context.state.get(trace_id, 'operation')
  context.state.delete(trace_id, 'operation')
  context.state.clear(trace_id)
end
```

## State Methods

| Method | Usage | Description |
|--------|-------|-------------|
| `get` | `await state.get(scope, key)` | Retrieve value |
| `set` | `await state.set(scope, key, value)` | Store value |
| `delete` | `await state.delete(scope, key)` | Delete key |
| `clear` | `await state.clear(scope)` | Clear scope |
| `getGroup` | `await state.getGroup(scope)` | Get all items in scope |

## Storage Configuration

```yaml
# config.yml - Memory (default)
state:
  adapter: memory

# File adapter  
state:
  adapter: file
  path: '.motia/state.json'

# Redis adapter
state:
  adapter: redis
  host: localhost
  port: 6379
  ttl: 3600
```

## Best Practices

- Use hierarchical keys: `await state.set(traceId, 'processing.status', 'complete')`
- Clean up state when no longer needed: `await state.clear(traceId)`
- Use TypeScript interfaces for type safety when possible 