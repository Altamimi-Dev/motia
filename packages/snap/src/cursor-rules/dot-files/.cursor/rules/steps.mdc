---
description: Basic concepts for creating Motia steps
globs: 
alwaysApply: false
---
# Motia Steps Reference

Steps are the fundamental building blocks of Motia workflows.

### API Steps
```typescript
export const config: ApiRouteConfig = {
  type: 'api',
  name: 'StepName',
  method: 'POST',
  path: '/endpoint',
  emits: ['event.topic'],
  flows: ['flow-name']
}

export const handler: Handlers['StepName'] = async (req, { emit, logger }) => {
  // Return: { status: number, body: any }
}
```

### Event Steps
```typescript
export const config: EventConfig = {
  type: 'event',
  name: 'StepName',
  subscribes: ['input.topic'],
  emits: ['output.topic'],
  input: z.object({ field: z.string() }),
  flows: ['flow-name']
}

export const handler: Handlers['StepName'] = async (input, { emit, logger }) => {
  // Process event data
}
```

### Cron Steps
```typescript
export const config: CronConfig = {
  type: 'cron',
  name: 'StepName',
  cron: '0 0 * * 1',
  emits: ['scheduled.event'],
  flows: ['flow-name']
}

export const handler: Handlers['StepName'] = async ({ emit, logger }) => {
  // Scheduled task logic
}
```

### Stream Configuration
```typescript
export const config: StreamConfig = {
  name: 'streamName',
  schema: z.object({ field: z.string() }),
  baseConfig: { storageType: 'default' }
}

// Usage: streams.streamName.set(groupId, id, data)
```

### NOOP Steps
```typescript
export const config: NoopConfig = {
  type: 'noop',
  name: 'StepName',
  virtualSubscribes: ['topic'],
  virtualEmits: ['topic'],
  flows: ['flow-name']
}

// No handler for NOOP steps
```

## Basic Structure

Every step has two parts:
1. **Configuration**: Exported `config` object defining the step's properties
2. **Handler**: Exported `handler` function containing the business logic

## Best Practices

- Keep steps small and focused
- Use descriptive topic names (`user.created`, `order.processed`)  
- Include proper error handling
- Use structured logging with context
- Validate input data with Zod schemas
- Associate steps with flows 