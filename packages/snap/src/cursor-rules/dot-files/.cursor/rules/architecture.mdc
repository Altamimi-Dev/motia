---
description: Basic Motia workflow patterns and project structure
globs: []
alwaysApply: true
---
# Motia Framework Basics

Motia is an event-driven workflow framework that breaks down complex processes into smaller, manageable **steps** that communicate through **topics**.

## Core Concepts

- **Steps**: Building blocks that encapsulate business logic (API, Event, Cron, NOOP)
- **Topics**: Named channels for step communication
- **Flows**: Logical groupings of related steps

## Step Types

- **API Steps**: HTTP endpoints (type: 'api')
- **Event Steps**: Event processing (type: 'event') 
- **Cron Steps**: Scheduled tasks (type: 'cron')
- **Streams**: Real-time data (StreamConfig)
- **NOOP Steps**: Workflow connectors (type: 'noop')

## Basic Workflow Pattern

```
API Step → [topic] → Event Step → [topic] → Event Step
```

Steps communicate via topics:
- Steps declare what topics they `subscribe` to (receive events)  
- Steps declare what topics they `emit` to (send events)
- Use descriptive topic names: `user.created`, `order.processed`

## Project Structure

```
my-project/
├── steps/
│   ├── api-endpoint.step.ts
│   ├── process-data.step.ts  
│   └── send-notification.step.ts
├── package.json
└── config.yml
```

## Best Practices

- Keep steps small and focused
- Use clear, descriptive names
- Always include steps in a flow
- Use API steps for external triggers
- Use Event steps for business logic
- Use consistent topic naming 