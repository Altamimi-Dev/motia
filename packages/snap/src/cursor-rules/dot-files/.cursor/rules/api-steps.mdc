---
description: How to create API Steps in Motia
globs: 
alwaysApply: false
---
# API Steps Guide

API Steps expose HTTP endpoints that can trigger workflows and emit events.

## Basic API Step

```typescript
import { ApiRouteConfig, Handlers } from 'motia'
import { z } from 'zod'

export const config: ApiRouteConfig = {
  type: 'api',
  name: 'CreateResource',
  path: '/resources',
  method: 'POST',
  bodySchema: z.object({
    title: z.string().min(1),
    description: z.string().optional(),
    category: z.string().min(1)
  }),
  emits: ['resource.created'],
  flows: ['resource-management']
}

export const handler: Handlers['CreateResource'] = async (req, { emit, logger }) => {
  const { title, description, category } = req.body
  
  const resourceId = crypto.randomUUID()
  const resourceData = {
    id: resourceId,
    title,
    description,
    category,
    createdAt: new Date().toISOString()
  }

  await emit({
    topic: 'resource.created',
    data: resourceData
  })
  
  logger.info('Resource created', { resourceId, title })

  return {
    status: 201,
    body: { message: 'Resource created', resourceId }
  }
}
```

## GET Endpoint

```typescript
export const config: ApiRouteConfig = {
  type: 'api',
  name: 'GetResources',
  path: '/resources',
  method: 'GET',
  emits: ['resources.fetched'],
  flows: ['resource-management']
}

export const handler: Handlers['GetResources'] = async (req, { emit, logger }) => {
  const { limit = 10, category } = req.queryParams
  
  // Fetch from your data source
  const resources = await getResources({ limit, category })

  await emit({
    topic: 'resources.fetched',
    data: { resources, count: resources.length }
  })
  
  return {
    status: 200,
    body: { resources }
  }
}
```

## Path Parameters

```typescript
export const config: ApiRouteConfig = {
  type: 'api',
  name: 'GetResourceById',
  path: '/resources/:id',
  method: 'GET',
  emits: ['resource.retrieved'],
  flows: ['resource-management']
}

export const handler: Handlers['GetResourceById'] = async (req, { emit, logger }) => {
  const { id } = req.pathParams
  
  const resource = await getResourceById(id)
  if (!resource) {
    return {
      status: 404,
      body: { error: 'Resource not found' }
    }
  }

  await emit({
    topic: 'resource.retrieved',
    data: { resource }
  })

  return {
    status: 200,
    body: { resource }
  }
}
``` 